##### No novel code/scripts are generated from our analysis. The codes used are adopted from the corresponding packages used.

library(Seurat)
library(plyr)
library(dplyr)
library(cowplot)
library(ggplot2)
library(patchwork)
library(Matrix)
library(data.table)
library(tidyr)
library(ggpubr)
library(tidyverse)
library(RColorBrewer)
library(writexl)
library(viridis)
library(hrbrthemes)
library(devtools)
library(harmony)
library(ggeasy)

#################### PRE-PROCESSING #################### 

##### Load each data. Here's an example of 1 scRNA-seq data.
Data1.data <- Read10X(data.dir = "/mnt/RAID_5/vincent/Project/2021_DatafromGEO_GSE_GSE168732-KD-before-IVIG/P1/P1-BEFORE-IVIG")

##### Create Seurat object
Data1 <- CreateSeuratObject(counts = Data1.data, project = "Data1", min.cells = 3, min.features = 200)

##### Calculate % mitochondrial and ribosomal reads
Data1[["percent.mt"]] <- PercentageFeatureSet(Data1, pattern = "^MT-")
Data1[["percent.hb"]] <- PercentageFeatureSet(Data1, pattern = "^HB") # For 10% hemoglobin: https://insight.jci.org/articles/view/135678#SEC4

##### Visualize QC metrics as a violin plot
VlnPlot(Data1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.hb"), ncol = 4)
Data1 <- subset(Data1, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & nCount_RNA < 20000  & percent.mt < 15 & percent.hb < 5)

##### Removal of Confounding Genes
Data1 <- Data1[!grepl("^MT-", rownames(Data1)), ] 
Data1 <- Data1[!grepl("MALAT1", rownames(Data1)), ]
Data1 <- Data1[!grepl("XIST", rownames(Data1)), ]
Data1 <- Data1[!grepl("RSP4Y1", rownames(Data1)), ]
Data1 <- Data1[grep("^RP[SL][[:digit:]]|^RPLP[[:digit:]]|^RPSA", rownames(Data1), value = T, invert = T), ]

##### Doublet Removal (multiplet rates obtained from: https://nbisweden.github.io/workshop-scRNAseq/labs/compiled/seurat/seurat_01_qc.html#Predict_doublets)
suppressMessages(require(DoubletFinder))

Data1 <- NormalizeData(Data1)
Data1 <- FindVariableFeatures(Data1, selection.method = "vst", nfeatures = 3000) 
Data1 <- ScaleData(Data1)
Data1 <- RunPCA(Data1)
Data1 <- RunUMAP(Data1, dims = 1:10)

##### Do this for all data individually to run the code below
A <- Data1

## Can run parameter optimization with paramSweep
sweep.res <- paramSweep_v3(A)
sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)
bcmvn <- find.pK(sweep.stats)

## define the expected number of doublets
nExp <- round(ncol(A) * 0.004)

## Doublet calculation
A <- doubletFinder_v3(A, pN = 0.25, pK = 0.09, nExp = nExp, PCs = 1:10)

### Name of the DF prediction can change, so extract the correct column name.
DF.name = colnames(A@meta.data)[grepl("DF.classification", colnames(A@meta.data))]
cowplot::plot_grid(ncol = 2, DimPlot(A, group.by = "orig.ident") + NoAxes(),
                   DimPlot(A, group.by = DF.name) + NoAxes())

## Remove all predicted doublets from our data.
A = A[, A@meta.data[, DF.name] == "Singlet"]
any(A@meta.data=="Doublet")
head(A)

## Confirm that there's no doublet in each data
any(A@meta.data=="Doublet")

##### Re-assign to original name. Do it for all data.
Data1 <- A

## Keep all data in a list
All_Data.list <- list(Data1, , Data2, DataN) # All datasets 1-N included 


###########  CELL CYCLE SCORING
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes

# ### Normalization, Scaling, Cellcycle Scoring: https://satijalab.org/seurat/articles/cell_cycle_vignette.html
for (i in 1:length (All_Data.list)) {
  All_Data.list[[i]] <-NormalizeData(All_Data.list[[i]], verbose = TRUE)
  All_Data.list[[i]] <-FindVariableFeatures(All_Data.list[[i]], selection.method = "vst", nfeatures=3000, verbose = TRUE)
  All_Data.list[[i]] <-ScaleData(All_Data.list[[i]], features = rownames(All_Data.list[[i]]), verbose = TRUE)
  All_Data.list[[i]] <-RunPCA(All_Data.list[[i]], verbose = TRUE)
  All_Data.list[[i]] <-CellCycleScoring(All_Data.list[[i]], s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
}

##### MERGE ALL THE INDIVIDUAL DATASETS
ALL.merged <- merge(All_Data.list[[1]], All_Data.list[-1], project = "Neutrophil Project") 

# Need to run the  Scaldedata and RunPCA again because after you merge it will be erased (merging erases the ...) See merge() 
ALL.merged <-NormalizeData(ALL.merged, verbose = TRUE)
ALL.merged <-FindVariableFeatures(ALL.merged, selection.method = "vst", nfeatures=3000, verbose = TRUE) # test nFeatures = all.genes ...or features = VariableFeatures(object)
     
##### Sacale data and RunPCA 
ALL.merged <-ScaleData(ALL.merged, features = rownames(ALL.merged), verbose = TRUE) 
ALL.merged <-RunPCA(ALL.merged, verbose = TRUE) ### This will use the nFeatures=3000 from before ... or you can set: features = VariableFeatures(object)
      
##### DIMENSIONALITY
ALL.filtered <- RunUMAP(ALL.merged, dims = 1:30, reduction = 'pca') 
    DimPlot(ALL.filtered, reduction = 'umap', group.by = 'disease')
    DimPlot(ALL.filtered, reduction = 'umap', split.by = 'disease')


####################  HARMONY: INTEGRATION ####################
library("harmony")

##### Integration and harmonization
ALL.harmony <- ALL.filtered %>%
  RunHarmony(group.by.vars = 'orig.ident', plot_convergence = FALSE, kmeans_init_nstart=20, kmeans_init_iter_max=100)

ALL.harmony@reductions
ALL.harmony.embed <- Embeddings(ALL.harmony, "harmony")
ALL.harmony.embed[1:10,1:10] # checking the first 10 harmony components

##### Do UMAP and clustering using ** Harmony embeddings instead of PCA **
ALL.harmony <- ALL.harmony %>%
  RunUMAP(reduction = 'harmony', dims = 1:30) %>%
  FindNeighbors(reduction = "harmony", dims = 1:30) %>%
  FindClusters(resolution = 0.5)

####################  SIGNACX: CELLTYPE ANNOTATION ####################
library(SignacX)

##### Run Signac FAST 
labels_fast <- SignacFast(ALL.harmony)
celltypes = GenerateLabels(labels_fast, E = ALL.harmony)

##### All Cellstates
ALL.harmony <- AddMetaData(ALL.harmony, metadata = celltypes$CellStates, col.name = "cellstates")
ALL.harmony <- SetIdent(ALL.harmony, value = "cellstates")

####################  NEUTROPHIL RE-CLUSTERING AND RE-HARMONIZATION ####################

##### Subset neutrophils
Neutrophils <- subset(ALL.harmony, idents = "Neutrophils")

##### Find Variable Features again
Neutrophils <- FindVariableFeatures(Neutrophils, selection.method = "vst", nfeatures = 2000)
        top <- head(VariableFeatures(Neutrophils), 30)
        plot <- VariableFeaturePlot(Neutrophils)
        LabelPoints(plot, points = top, repel = TRUE)

##### Scale the data
Neutrophils <- ScaleData(Neutrophils, features = rownames(Neutrophils), verbose = FALSE) 
ElbowPlot(Neutrophils)

##### Harmonization and Re-clustering
Neutrophils <- RunPCA(Neutrophils, verbose = FALSE, npcs = 3) # npcs = 3, npcs = 30  
Neutrophils <- RunHarmony(Neutrophils, group.by.vars = "disease", theta = 1) 
Neutrophils <- RunUMAP(Neutrophils, reduction = "harmony", dims = 1:3)
Neutrophils <- FindNeighbors(Neutrophils, reduction = "harmony", dims = 1:3)
Neutrophils <- FindClusters(Neutrophils, resolution = c(0.1)) 

##### UMAP Visualization showing 4 clusters (0, 1, 2, 3) 
DimPlot(Neutrophils)

##### Grouping: Disease_Cluster
      levels(Neutrophils)
      Idents(Neutrophils) <- "disease"
      Neutrophils$Disease_Cluster <- paste(Idents(Neutrophils), Neutrophils$seurat_clusters, sep = "_C")
      Idents(Neutrophils) <- "Disease_Cluster"

