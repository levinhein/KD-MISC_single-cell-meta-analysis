########## NOTE: No novel code/scripts are generated from our analysis. 
########## All codes used are adopted from the corresponding packages' public tutorials/vignettes used.


##### TUTORIAL: Go to 3.2 Starting with count matrix data
### https://master.bioconductor.org/packages/release/workflows/vignettes/rnaseqGene/inst/doc/rnaseqGene.html

################################################################################ BULK RNA-SEQ
################################################################################ BULK RNA-SEQ
################################################################################ BULK RNA-SEQ
################################################################################ BULK RNA-SEQ
################################################################################ BULK RNA-SEQ
################################################################################ BULK RNA-SEQ
################################################################################ BULK RNA-SEQ
################################################################################ BULK RNA-SEQ
################################################################################ BULK RNA-SEQ
################################################################################ BULK RNA-SEQ


###### Step 1.0 Loading data Gene count and Metadata in R
# read_Count <- read.table("hammer_count_table.txt", header = T)
read_Count <- read.table("GSE217370_Pedi_COVID_MISC_Counts.txt.gz", header = TRUE, row.names = 1, check.names = FALSE)
# #View(read_Count)
# head(read_Count)
# dim(read_Count)

#Import the metadata
# Read the sample information into R
# metadata <- read.table("sample-info.txt", header = T)
# metadata <- read.delim("sample-info.txt", stringsAsFactors = TRUE)
metadata <- read.delim("sample-info-HC-MIS-C.txt", stringsAsFactors = TRUE)

#View(metadata)
head(metadata)

#### convert so that they would be the same
head(metadata)
samp <- metadata
samp$SAMPLES <- samp$SAMPLE
samp2 <- samp[,-1]
rownames(samp2) <- samp[,1]
metadata <- samp2
head(metadata)


#### Format the data
# Remove first one columns from seqdata
# read_Count <- read_Count[,-(1:1)]
# CLEAN DATA: Remove the COVID data; remove first 20 columns (COVID 07-43) from seqdata
read_Count <- read_Count[,-(1:20)]
head(read_Count)


###### Is our sample information in sampleinfo/metadata  in the same order as the columns in countdata?
all(rownames(metadata) == colnames(read_Count))


##### START ANALYSIS
##### START ANALYSIS
##### START ANALYSIS
##### START ANALYSIS
##### START ANALYSIS
##### START ANALYSIS

library("DESeq2")

### INTIALIZE
countdata <- read_Count
coldata <- metadata

# IF ERROR (values are not integers): Round count data to nearest integer
countdata <- round(countdata)

# dds <- DESeqDataSetFromMatrix(countData = countdata,
#                                  colData = coldata,
#                                  design = ~ 1) # if no covariate

dds <- DESeqDataSetFromMatrix(countData = countdata,
                              colData = coldata,
                              design = ~ GROUP)


##### 4. Exploratory analysis and visualization
##### 4. Exploratory analysis and visualization
##### 4. Exploratory analysis and visualization
##### 4. Exploratory analysis and visualization
##### 4. Exploratory analysis and visualization

# Pre-filtering "if there were at least 6 counts in 20% of samples". 20% of 29 = 6 samples.
nrow(dds) # 60,684
#keep <- rowSums(counts(dds)) > 1 ### default minimal filter: only a single count across all samples
keep <- rowSums(counts(dds) >= 6) >= 6 ### at least 6 samples with a count of 6 or higher
dds <- dds[keep,]
nrow(dds) # default (44,206), other (15,505)

# 4.2 The variance stabilizing transformation (vst) and the rlog

lambda <- 10^seq(from = -1, to = 2, length = 1000)
cts <- matrix(rpois(1000*100, lambda), ncol = 100)

library("vsn")
meanSdPlot(cts, ranks = FALSE)

log.cts.one <- log2(cts + 1)
meanSdPlot(log.cts.one, ranks = FALSE)

vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)

colData(vsd) # the columns are: GROUP, SAMPLES, sizeFactor

# Again, for the rlog:
# Again, for the rlog:
# Again, for the rlog:
rld <- rlog(dds, blind = FALSE)
head(assay(rld), 3)


library("dplyr")
library("ggplot2")

dds <- estimateSizeFactors(dds)

df <- bind_rows(
  as.data.frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
    mutate(transformation = "log2(x + 1)"),
  as.data.frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"),
  as.data.frame(assay(rld)[, 1:2]) %>% mutate(transformation = "rlog"))

colnames(df)[1:2] <- c("x", "y")  

lvls <- c("log2(x + 1)", "vst", "rlog")
df$transformation <- factor(df$transformation, levels=lvls)


ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
  coord_fixed() + facet_grid( . ~ transformation)  


# 4.3 Sample distances
# 4.3 Sample distances
# 4.3 Sample distances
# 4.3 Sample distances
# 4.3 Sample distances
sampleDists <- dist(t(assay(vsd)))
sampleDists

library("pheatmap")
library("RColorBrewer")

sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$GROUP, vsd$SAMPLES, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)

pheatmap(sampleDistMatrix,
         clustering_distance_rows = sampleDists,
         clustering_distance_cols = sampleDists,
         col = colors)


library("PoiClaClu")
poisd <- PoissonDistance(t(counts(dds)))

#We plot the heatmap in a Figure below.

samplePoisDistMatrix <- as.matrix( poisd$dd )
rownames(samplePoisDistMatrix) <- paste( dds$GROUP, dds$SAMPLES, sep=" - " )
colnames(samplePoisDistMatrix) <- NULL

pheatmap(samplePoisDistMatrix,
         clustering_distance_rows = poisd$dd,
         clustering_distance_cols = poisd$dd,
         col = colors)

# 4.4 PCA plot

plotPCA(vsd, intgroup = c("GROUP", "SAMPLES"))

pcaData <- plotPCA(vsd, intgroup = c("GROUP", "SAMPLES"), returnData = TRUE)
pcaData

percentVar <- round(100 * attr(pcaData, "percentVar"))

ggplot(pcaData, aes(x = PC1, y = PC2, color = GROUP, shape = SAMPLES)) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  ggtitle("PCA with VST data")

# 4.5 PCA plot using Generalized PCA

library("glmpca")
gpca <- glmpca(counts(dds), L=2)
gpca.dat <- gpca$factors
gpca.dat$GROUP <- dds$GROUP
gpca.dat$SAMPLES <- dds$SAMPLES

ggplot(gpca.dat, aes(x = dim1, y = dim2, color = GROUP, shape = SAMPLES)) +
  geom_point(size =3) + coord_fixed() + ggtitle("glmpca - Generalized PCA")

# 4.6 MDS plot

mds <- as.data.frame(colData(vsd))  %>%
  cbind(cmdscale(sampleDistMatrix))

ggplot(mds, aes(x = `1`, y = `2`, color = GROUP, shape = SAMPLES)) +
  geom_point(size = 3) + coord_fixed() + ggtitle("MDS with VST data")

# MDS plot USING vst DATA
mdsPois <- as.data.frame(colData(dds)) %>%
  cbind(cmdscale(samplePoisDistMatrix))

ggplot(mdsPois, aes(x = `1`, y = `2`, color = GROUP, shape = SAMPLES)) +
  geom_point(size = 3) + coord_fixed() + ggtitle("MDS with PoissonDistances")


########## 5. Differential expression analysis
########## 5. Differential expression analysis
########## 5. Differential expression analysis
########## 5. Differential expression analysis
########## 5. Differential expression analysis

# 5.1 Running the differential expression pipeline
dds <- DESeq(dds)

# 5.2 Building the results table
res <- results(dds, contrast=c("GROUP","MISC","HC")) # OR SIMPLY: res <- results(dds)
res

# As res is a DataFrame object, it carries metadata with information on the meaning of the columns:
mcols(res, use.names = TRUE)

# summarize
summary(res) # check tutorial if you want to adjust FDR or LogFC


# 5.3 Other comparisons
results(dds, contrast = c("SAMPLES", "N061011", "N61311")) # Comparing log2 FC between 2 samples

# 5.4 Multiple testing
sum(res$pvalue < 0.05, na.rm=TRUE) # 1,868
sum(!is.na(res$pvalue)) # 15,505

sum(res$padj < 0.1, na.rm=TRUE)

# Subset those genes and re-arrange logFC to find the most significant genes
resSig <- subset(res, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])



